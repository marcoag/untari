{"version":3,"sources":["Components/Home.js","Components/About.js","Components/Contact.js","Components/Main.js","Components/Blog.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","href","to","About","Contact","Main","class","role","Blog","App","Fragment","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAoBeA,G,MAhBF,WACT,OACG,6BACW,wBAAIC,UAAU,kBAAd,cACI,6BACE,wBAAIA,UAAU,oBACV,wBAAIA,UAAU,UAAS,uBAAGC,KAAK,SAAR,SACvB,4BAAI,kBAAC,IAAD,CAASC,GAAG,SAAZ,UACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,WAAZ,YACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,QAAZ,cCFjBC,EATD,WACV,OACG,6BACG,wCACA,2DCKKC,EATC,WACZ,OACG,6BACG,0CACA,6DCgBKC,EAfF,WACT,OACK,yBAAKL,UAAU,mBACZ,yBAAKA,UAAU,gBACZ,yBAAKA,UAAU,sBACd,yBAAKA,UAAU,eACf,wBAAIA,UAAU,iBAAd,sCACA,uBAAGC,KAAK,IAAIK,MAAM,eAAeC,KAAK,UAAS,kBAAC,IAAD,CAASL,GAAG,QAAZ,6BCHhDM,EATF,WACT,OACG,6BACG,oCACA,kDCuBKC,E,uKAlBX,OACI,kBAAC,IAAMC,SAAP,KACQ,kBAAC,IAAD,KACG,yBAAKJ,MAAM,YACP,kBAAC,IAAD,KACK,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,QAAQC,UAAWd,IAC/B,kBAAC,IAAD,CAAOa,KAAK,QAAQC,UAAWL,IAC/B,kBAAC,IAAD,CAAOI,KAAK,SAASC,UAAWV,IAChC,kBAAC,IAAD,CAAOS,KAAK,WAAWC,UAAWT,Y,GAX5CU,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAD,CAAQC,SAAUC,eAChB,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.730a8932.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink, Link } from 'react-router-dom'\nimport { Nav, Navbar } from 'reactstrap';\n\nconst Home = () => {\n    return (\n       <div>\n                  <h3 className=\"masthead-brand\">Untari.com</h3>\n                      <nav>\n                        <ul className=\"nav masthead-nav\">\n                            <li className=\"active\"><a href=\"#Home\">Home</a></li>\n                            <li><NavLink to=\"About\">About</NavLink></li>\n                            <li><NavLink to=\"Contact\">Contact</NavLink></li>\n                            <li><NavLink to=\"Blog\">Blog</NavLink></li>\n                        </ul>\n                     </nav>\n       </div>\n    );\n}\n \nexport default Home;\n","import React from 'react';\n \nconst About = () => {\n    return (\n       <div>\n          <h1>About Me</h1>\n          <p>About US page body content</p>\n       </div>\n    );\n}\n \nexport default About;\n","import React from 'react';\n \nconst Contact = () => {\n    return (\n       <div>\n          <h1>Contact US</h1>\n          <p>Contact US page body content</p>\n       </div>\n    );\n}\n \nexport default Contact;\n","import React from 'react';\nimport { Switch, Route, Link, NavLink } from 'react-router-dom';\nimport Home from './Home';\nimport About from './About';\nimport Contact from './Contact';\n\n\nconst Main = () => {\n    return(\n         <div className=\"container-inner\">\n            <div className=\"site-wrapper\">\n               <div className=\"site-wrapper-inner\">\n                <div className=\"inner cover\">\n                <h1 className=\"inner-heading\">Welcome to Untari personal website</h1>\n                <a href=\"#\" class=\"btn btn-info\" role=\"button\"><NavLink to=\"Home\">Click here to enter</NavLink></a>\n                </div>\n              </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Main;\n","import React from 'react';\n \nconst Blog = () => {\n    return (\n       <div>\n          <h1>Blog</h1>\n          <p>blog body content</p>\n       </div>\n    );\n}\n \nexport default Blog;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css'; \nimport Home from './Components/Home';\nimport Main from './Components/Main';\nimport About from './Components/About';\nimport Contact from './Components/Contact';\nimport Blog from './Components/Blog';\n \nclass App extends Component {\n  render() {\n    return (      \n        <React.Fragment>\n                <BrowserRouter>\n                   <div class=\"bg-image\">\n                       <Switch>\n                            <Route exact path=\"/\" component={Main} />\n                            <Route path=\"/home\" component={Home} />\n                            <Route path=\"/blog\" component={Blog} />\n                            <Route path=\"/about\" component={About}/>\n                            <Route path=\"/contact\" component={Contact}/> \n                      </Switch>\n                    </div>\n                </BrowserRouter>\n        </React.Fragment> \n    );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Home from './Components/Home';\nimport Main from './Components/Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}