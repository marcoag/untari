{"version":3,"sources":["Components/Home.js","Components/Blog.js","Components/Contact.js","Components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Home","class","href","type","Blog","Component","Navigation","to","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAkCeA,G,MA/BF,WACT,OACG,6BACO,yBAAKC,MAAM,gBACT,yBAAKA,MAAM,sBACP,yBAAKA,MAAM,aACX,yBAAKA,MAAM,qBACP,yBAAKA,MAAM,mBACX,wBAAIA,MAAM,kBAAV,cACA,6BACI,wBAAIA,MAAM,oBACN,wBAAIA,MAAM,UAAS,uBAAGC,KAAK,KAAR,SACnB,4BAAI,uBAAGA,KAAK,KAAR,UACJ,4BAAI,uBAAGA,KAAK,KAAR,YACJ,4BAAI,uBAAGA,KAAK,KAAR,aAKhB,yBAAKD,MAAM,eACP,wBAAIA,MAAM,iBAAV,sCAEA,4BAAQE,KAAK,SAASF,MAAM,mBAA5B,8B,OCdTG,GCPOC,YDFT,WACT,OACG,6BACG,oCACA,mDEQKC,EAVI,WACf,OACG,6BACG,kBAAC,IAAD,CAASC,GAAG,KAAZ,QACA,kBAAC,IAAD,CAASA,GAAG,UAAZ,SACA,kBAAC,IAAD,CAASA,GAAG,YAAZ,aCkBKC,E,uKAhBX,OACG,kBAAC,IAAD,KACC,6BACE,kBAAC,EAAD,MACE,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWV,EAAMW,OAAK,IACtC,kBAAC,IAAD,CAAOF,KAAK,QAAQC,UAAWN,W,GAR1BC,aCGEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c2faa2bf.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'reactstrap';\n\nconst Home = () => {\n    return (\n       <div>\n              <div class=\"site-wrapper\">\n                <div class=\"site-wrapper-inner\">\n                    <div class=\"container\">\n                    <div class=\"masthead clearfix\">\n                        <div class=\"container inner\">\n                        <h3 class=\"masthead-brand\">Untari.com</h3>\n                        <nav>\n                            <ul class=\"nav masthead-nav\">\n                                <li class=\"active\"><a href=\"#\">Home</a></li>\n                                <li><a href=\"#\">About</a></li>\n                                <li><a href=\"#\">Contact</a></li>\n                                <li><a href=\"#\">Blog</a></li>\n                            </ul>\n                        </nav>\n                        </div>\n                    </div>\n                    <div class=\"inner cover\">\n                        <h1 class=\"cover-heading\">Welcome to Untari personal website</h1>\n                        \n                        <button type=\"button\" class=\"btn btn-success\">Click here to enter</button>\n                    </div>\n                    </div>\n                </div>\n                </div>\n       </div>\n    );\n}\n \nexport default Home;\n","import React from 'react';\n \nconst Blog = () => {\n    return (\n       <div>\n          <h1>Blog</h1>\n          <p>blog body content</p>\n       </div>\n    );\n}\n \nexport default Blog;\n","import React, { Component } from 'react';\nimport { Grid, Cell, List, ListItem, ListItemContent } from 'react-mdl';\n\n\nclass Contact extends Component {\n  render() {\n    return(\n      <div className=\"contact-body\">\n        <Grid className=\"contact-grid\">\n          <Cell col={6}>\n            <h2>Paul Hanna</h2>\n            <img\n              src=\"https://cdn2.iconfinder.com/data/icons/avatar-2/512/Fred_man-512.png\"\n              alt=\"avatar\"\n              style={{height: '250px'}}\n               />\n             <p style={{ width: '75%', margin: 'auto', paddingTop: '1em'}}>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries</p>\n\n          </Cell>\n          <Cell col={6}>\n            <h2>Contact Me</h2>\n            <hr/>\n\n            <div className=\"contact-list\">\n              <List>\n                <ListItem>\n                  <ListItemContent style={{fontSize: '30px', fontFamily: 'Anton'}}>\n                    <i className=\"fa fa-phone-square\" aria-hidden=\"true\"/>\n                    (123) 456-7890\n                  </ListItemContent>\n                </ListItem>\n\n                <ListItem>\n                  <ListItemContent style={{fontSize: '30px', fontFamily: 'Anton'}}>\n                    <i className=\"fa fa-fax\" aria-hidden=\"true\"/>\n                    (123) 456-7890\n                  </ListItemContent>\n                </ListItem>\n\n                <ListItem>\n                  <ListItemContent style={{fontSize: '30px', fontFamily: 'Anton'}}>\n                    <i className=\"fa fa-envelope\" aria-hidden=\"true\"/>\n                    someone@example.com\n                  </ListItemContent>\n                </ListItem>\n\n                <ListItem>\n                  <ListItemContent style={{fontSize: '30px', fontFamily: 'Anton'}}>\n                    <i className=\"fa fa-skype\" aria-hidden=\"true\"/>\n                    MySkypeID\n                  </ListItemContent>\n                </ListItem>\n\n\n              </List>\n            </div>\n          </Cell>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport default Contact;\n","import React from 'react';\n \nimport { NavLink } from 'react-router-dom';\n \nconst Navigation = () => {\n    return (\n       <div>\n          <NavLink to=\"/\">Home</NavLink>\n          <NavLink to=\"/about\">About</NavLink>\n          <NavLink to=\"/contact\">Contact</NavLink>\n       </div>\n    );\n}\n \nexport default Navigation;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css'; \nimport Home from './Components/Home';\nimport About from './Components/About';\nimport Contact from './Components/Contact';\nimport Blog from './Components/Blog';\nimport Navigation from './Components/Navigation';\n \nclass App extends Component {\n  render() {\n    return (      \n       <BrowserRouter>\n        <div>\n          <Navigation />\n            <Switch>\n             <Route path=\"/\" component={Home} exact/>\n             <Route path=\"/blog\" component={Blog} />\n          {/*   <Route path=\"/about\" component={About}/>*/}\n           {/*  <Route path=\"/contact\" component={Contact}/> */}\n           </Switch>\n        </div> \n      </BrowserRouter>\n    );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}